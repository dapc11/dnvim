{
  "#!/usr/bin/env python3": {
    "prefix": "shebang",
    "body": "#!/usr/bin/env python3\n$0",
    "description": "Adds shebang line for default python 3 interpreter."
  },
  "Pretty print dict": {
    "prefix": "pretty",
    "body": [
      "json.dumps($1, indent=2)"
    ],
    "description": "Pretty print a dict"
  },
  "Open file for reading": {
    "prefix": "read",
    "body": [
      "with open($1) as f:",
      "\ttext = f.read()"
    ],
    "description": "Open file for reading in a with statement"
  },
  "Open file for writing": {
    "prefix": "write",
    "body": [
      "with open($1, w) as f:",
      "\tf.write($2)"
    ],
    "description": "Open file for writing using a with statement"
  },
  "Print function variable": {
    "prefix": "print",
    "body": [
      "print('${1:func}: ${2:var} = {}'.format($2))"
    ],
    "description": "Print a function local variable"
  },
  "Main entry point": {
    "prefix": "main",
    "body": [
      "def ${1:main()}:",
      "\t$0",
      "",
      "",
      "if __name__ == '__main__':",
      "\t${1:main()}"
    ],
    "description": "Call entry point function if this script is run directly"
  },
  "New class with init": {
    "prefix": "class",
    "body": [
      "class ${1:name}${2:(object)}:",
      "\tdef __init__(self, ${3:var}):",
      "\t\tself.${3:var} = ${3:var}",
      "\tdef __str__(self):",
      "\t\treturn '${1:name}@{:#x}: {}'.format(id(self), self.${3:var})"
    ],
    "description": "Simple class skeleton with init and str magic methods"
  },
  "try/except": {
    "prefix": "trye",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:expression} as ${3:identifier}:",
      "\t${4:pass}"
    ],
    "description": "Code snippet for a try/except statement"
  },
  "try/finally": {
    "prefix": "tryf",
    "body": [
      "try:",
      "\t${1:pass}",
      "finally:",
      "\t${2:pass}"
    ],
    "description": "Code snippet for a try/finally statement"
  },
  "try/except/finally": {
    "prefix": "tryef",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:expression} as ${3:identifier}:",
      "\t${4:pass}",
      "finally:",
      "\t${5:pass}"
    ],
    "description": "Code snippet for a try/except/finally statement"
  },
  "def(static class method)": {
    "prefix": "def static class method",
    "body": [
      "@staticmethod",
      "def ${1:funcname}(${2:parameter_list}):",
      "\t${3:pass}"
    ],
    "description": "Code snippet for a static class method"
  },
  "def(abstract class method)": {
    "prefix": "def abstract class method",
    "body": [
      "def ${1:funcname}(self, ${2:parameter_list}):",
      "\traise NotImplementedError"
    ],
    "description": "Code snippet for an abstract class method"
  },
  "lambda": {
    "prefix": "lambda",
    "body": [
      "lambda ${1:parameter_list}: ${2:expression}"
    ],
    "description": "Code snippet for a lambda statement"
  },
  "List comprehension": {
    "prefix": "listc",
    "body": "[${1:value} for ${2:value} in ${3:iterable}]$0",
    "description": "List comprehension for creating a list based on existing lists."
  },
  "Dictionary comprehension": {
    "prefix": "dictc",
    "body": "{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:iterable}}$0",
    "description": "Handy and faster way to create dictories based on existing dictionaries."
  },
  "Set comprehension": {
    "prefix": "setc",
    "body": "{${1:value} for ${2:value} in ${3:iterable}}$0",
    "description": "Create a set based on existing iterables."
  },
  "New method w/ return": {
    "prefix": "def",
    "body": "def ${1:mname}(self, ${2:arg}) -> ${3:return_type}:\n\t${4:pass}$0",
    "description": "Code snippet for a class method definition."
  },
  "New property": {
    "prefix": "property",
    "body": "@property\ndef ${1:foo}(self):\n    \"\"\"${2:The $1 property.}\"\"\"\n    ${3:return self._$1}\n@${4:$1}.setter\ndef ${5:$1}(self, value):\n    ${6:self._$1} = value",
    "description": "New property: get and set via decorator"
  },
  "if": {
    "prefix": "if",
    "body": "if ${1:condition}:\n\t${2:pass}$0",
    "description": "Code snippet for the if statement."
  },
  "if/else": {
    "prefix": "if/else",
    "body": [
      "if ${1:condition}:",
      "\t${2:pass}",
      "else:",
      "\t${3:pass}"
    ],
    "description": "Code snippet for an if statement with else"
  },
  "elif": {
    "prefix": "elif",
    "body": [
      "elif ${1:expression}:",
      "\t${2:pass}"
    ],
    "description": "Code snippet for an elif"
  },
  "else": {
    "prefix": "else",
    "body": [
      "else:",
      "\t${1:pass}"
    ],
    "description": "Code snippet for an else"
  },
  "for": {
    "prefix": "for",
    "body": "for ${1:value} in ${2:iterable}:\n\t${3:pass}$0",
    "description": "Code snippet to create a for loop structure."
  },
  "for/else": {
    "prefix": "for/else",
    "body": [
      "for ${1:target_list} in ${2:expression_list}:",
      "\t${3:pass}",
      "else:",
      "\t${4:pass}"
    ],
    "description": "Code snippet for a for loop with else"
  },
  "while": {
    "prefix": "while",
    "body": "while ${1:condition}:\n\t${2:pass}$0",
    "description": "Code snippet to create a while loop structure."
  },
  "while/else": {
    "prefix": "while/else",
    "body": [
      "while ${1:expression}:",
      "\t${2:pass}",
      "else:",
      "\t${3:pass}"
    ],
    "description": "Code snippet for a while loop with else"
  },
  "with": {
    "prefix": "with",
    "body": [
      "with ${1:expression} as ${2:target}:",
      "\t${3:pass}"
    ],
    "description": "Code snippet for a with statement"
  }
}
