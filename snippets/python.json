{
  "Pretty print dict": {
    "prefix": "dump",
    "body": [
      "json.dumps($1, indent=2)"
    ],
    "description": "Pretty print a dict"
  },
  "Open file for reading": {
    "prefix": "readfile",
    "body": [
      "with open($1) as f:",
      "\ttext = f.read()"
    ],
    "description": "Open file for reading in a with statement"
  },
  "Open file for writing": {
    "prefix": "writefile",
    "body": [
      "with open($1, w) as f:",
      "\tf.write($2)"
    ],
    "description": "Open file for writing using a with statement"
  },
  "Encoding statement": {
    "prefix": "cod",
    "body": "# -*- coding: utf-8 -*-",
    "description": "File encoding statement"
  },
  "Abstract method": {
    "prefix": "abstractmethod",
    "body": [
      "def ${1:name}:",
      "\traise NotImplementedError(\"This method is abstract. To provide a concrete implementation override this method in a subclass.\")"
    ],
    "description": "Abstract method body"
  },
  "Print function variable": {
    "prefix": "pvar",
    "body": [
      "print('${1:func}: ${2:var} = {}'.format($2))"
    ],
    "description": "Print a function local variable"
  },
  "Main entry point": {
    "prefix": "main",
    "body": [
      "def ${1:main()}:",
      "\t$0",
      "",
      "",
      "if __name__ == '__main__':",
      "\t${1:main()}"
    ],
    "description": "Call entry point function if this script is run directly"
  },
  "New class with init": {
    "prefix": "class1",
    "body": [
      "class ${1:name}${2:(object)}:",
      "\tdef __init__(self, ${3:var}):",
      "\t\tself.${3:var} = ${3:var}",
      "\tdef __str__(self):",
      "\t\treturn '${1:name}@{:#x}: {}'.format(id(self), self.${3:var})"
    ],
    "description": "Simple class skeleton with init and str magic methods"
  }
}